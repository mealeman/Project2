package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;


@Controller    
public class ControllerPrescriptionCreate {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}
	
	/* 
	 * Process the new prescription form.
	 * 1. DONE Validate that Doctor SSN exists and matches Doctor Name.
	 * 2. DONE Validate that Patient SSN exists and matches Patient Name.
	 * 3. DONE Validate that Drug name exists.
	 * 4. DONE Insert new prescription.
	 * 5. DONE If error, return error message and the prescription form
	 * 6. DONE Otherwise, return the prescription with the rxid number that was generated by the database.
	 */
	@PostMapping("/prescription")
	public String newPrescription( Prescription p, Model model) {
		int doctorid;
		int patientid;
		int drugid;
		
		String invalidCharacters = ".*[!@#$%^&*()]+.*";
		String validSSN = "^\\d{9}$";
		
		if(p.getDoctor_ssn().equals("") || p.getDoctorFirstName().equals("") || p.getDoctorLastName().equals("") || p.getPatient_ssn().equals("") || p.getPatientFirstName().equals("") || p.getPatientLastName().equals("") || p.getDrugName().equals("")) {
			model.addAttribute("message", "Invalid: Blank fields");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(!p.getDoctor_ssn().matches(validSSN)) {
			model.addAttribute("message", "Invalid SSN: Doctor");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(!p.getPatient_ssn().matches(validSSN)) {
			model.addAttribute("message", "Invalid SSN: Patient");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(p.getDoctorFirstName().matches(invalidCharacters) || p.getDoctorLastName().matches(invalidCharacters)) {
			model.addAttribute("message", "Invalid Characters: Doctor Name");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(p.getPatientFirstName().matches(invalidCharacters) || p.getPatientLastName().matches(invalidCharacters)) {
			model.addAttribute("message", "Invalid Characters: Patient Name");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(p.getDrugName().matches(invalidCharacters)) {
			model.addAttribute("message", "Invalid Characters: Drug Name");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		if(p.getQuantity() < 1) {
			model.addAttribute("message", "Quantity cannot be less than one");
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		//ensure doctor exists
		try(Connection con=getConnection();){
			PreparedStatement ps = con.prepareStatement("select id from Doctor where ssn=? and first_name=? and last_name=?");
			ps.setString(1, p.getDoctor_ssn());
			ps.setString(2, p.getDoctorFirstName());
			ps.setString(3,p.getDoctorLastName());
			
			ResultSet rs = ps.executeQuery();
			if(rs.next()) doctorid=(int)rs.getLong(1);
			else{
				model.addAttribute("message", "Doctor does not exist");
				model.addAttribute("prescription", p);
				return "prescription_create";
			}
			
		}catch(SQLException e) {
			System.out.println("SQL Error in doctor select");
			model.addAttribute("message", "SQL Error." + e.getMessage());
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		//ensure patient exists
		try(Connection con=getConnection();){
			PreparedStatement ps = con.prepareStatement("select patientid from Patient where ssn=? and first_name=? and last_name=?");
			ps.setString(1, p.getPatient_ssn());
			ps.setString(2, p.getPatientFirstName());
			ps.setString(3, p.getPatientLastName());
			
			ResultSet rs = ps.executeQuery();
			if(rs.next()) patientid=(int)rs.getLong(1);
			else{
				model.addAttribute("message", "Patient does not exist");
				model.addAttribute("prescription", p);
				return "prescription_create";
			}
			
		}catch(SQLException e) {
			System.out.println("SQL Error in patient select");
			model.addAttribute("message", "SQL Error." + e.getMessage());
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		//ensure drug name exists
		try(Connection con=getConnection();){
			PreparedStatement ps = con.prepareStatement("select drug_id from drug where trade_name=?");
			ps.setString(1, p.getDrugName());
			
			ResultSet rs = ps.executeQuery();
			if(rs.next()) drugid=(int)rs.getLong(1);
			else{
				model.addAttribute("message", "Drug does not exist");
				model.addAttribute("prescription", p);
				return "prescription_create";
			}
		}catch(SQLException e) {
			System.out.println("SQL Error in drug select");
			model.addAttribute("message", "SQL Error." + e.getMessage());
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		//Insert new Prescription 
		try(Connection con=getConnection();){
			PreparedStatement ps = con.prepareStatement("insert into Prescription(drug_id, tradename, quantity, patient, doctor) values (?,?,?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, (drugid));
			ps.setString(2, p.getDrugName());
			ps.setInt(3, p.getQuantity());
			ps.setInt(4,patientid);
			ps.setInt(5, doctorid);
			
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if(rs.next()) p.setRxid(rs.getString(1));
			else{
				model.addAttribute("message", "Prescription not generated");
				model.addAttribute("prescription", p);
				return "prescription_create";
			}
		
		} catch(SQLException e) {
			System.out.println("SQL error in newPrescription " + e.getMessage());
			model.addAttribute("message", "SQL Error." + e.getMessage());
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		
		//p.setRxid("RX1980031234");
		
		model.addAttribute("message", "Prescription created.");
		model.addAttribute("prescription", p);
		return "prescription_show";
	}
	
	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */

	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}
	
}
